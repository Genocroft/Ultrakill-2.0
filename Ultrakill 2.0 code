<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shooter Game</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #222;
      }
      canvas {
        display: block;
        background: #111;
        margin: 0 auto;
      }
      .game-over,
      .win-message {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 48px;
        color: white;
        font-family: Arial, sans-serif;
        text-align: center;
        display: none;
      }
      .wave-counter,
      .cooldown-timer {
        position: fixed;
        top: 10px;
        left: 10px;
        font-size: 20px;
        color: white;
        font-family: Arial, sans-serif;
        user-select: none; /* Prevent text selection */
      }
      .cooldown-timer {
        top: 40px;
      }
    </style>
  </head>
  <body>
    <canvas id="gameCanvas"></canvas>
    <div class="game-over" id="gameOver">Game Over</div>
    <div class="win-message" id="winMessage">You Win!</div>
    <div class="wave-counter" id="waveCounter">Wave: 1</div>
    <div class="cooldown-timer" id="cooldownTimer">Secondary Attack Ready</div>

    <script>
      const canvas = document.getElementById("gameCanvas");
      const ctx = canvas.getContext("2d");

      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;

      const player = {
        x: canvas.width / 2,
        y: canvas.height / 2,
        width: 30,
        height: 30,
        speed: 5,
        color: "blue",
        maxHealth: 100,
        health: 100,
        immune: false,
      };

      let keys = { w: false, a: false, s: false, d: false };
      let bullets = [];
      let enemies = [];
      let wave = 1;
      let enemiesToSpawn = 4;
      let gameOver = false;
      let cursor = { x: 0, y: 0 };
      let secondaryCooldown = false;
      let cooldownTimer = 0;
      let canShoot = true;

      function handlePlayerMovement() {
        if (keys.w && player.y > 0) player.y -= player.speed;
        if (keys.s && player.y < canvas.height - player.height)
          player.y += player.speed;
        if (keys.a && player.x > 0) player.x -= player.speed;
        if (keys.d && player.x < canvas.width - player.width)
          player.x += player.speed;
      }

      function drawPlayer() {
        ctx.fillStyle = player.color;
        ctx.fillRect(player.x, player.y, player.width, player.height);
      }

      function drawHealthBar() {
        const barWidth = 200;
        const barHeight = 20;
        const healthPercentage = player.health / player.maxHealth;
        const barFillWidth = barWidth * healthPercentage;

        ctx.fillStyle = "white";
        ctx.font = "16px Arial";
        ctx.fillText("HP", 10, 30);

        ctx.fillStyle = "red";
        ctx.fillRect(40, 10, barWidth, barHeight);

        ctx.fillStyle = "green";
        ctx.fillRect(40, 10, barFillWidth, barHeight);
      }

      function spawnEnemies() {
        if (enemies.length === 0) {
          for (let i = 0; i < enemiesToSpawn; i++) {
            let x = Math.random() * canvas.width;
            let y = Math.random() * canvas.height;

            while (
              Math.abs(x - player.x) < 100 &&
              Math.abs(y - player.y) < 100
            ) {
              x = Math.random() * canvas.width;
              y = Math.random() * canvas.height;
            }

            enemies.push({ x, y, width: 30, height: 30, health: 2 });
          }
        }
      }

      function updateEnemies() {
        enemies.forEach((enemy, index) => {
          const dx = player.x - enemy.x;
          const dy = player.y - enemy.y;
          const angle = Math.atan2(dy, dx);
          enemy.x += Math.cos(angle) * 2;
          enemy.y += Math.sin(angle) * 2;

          if (!player.immune && Math.abs(dx) < 20 && Math.abs(dy) < 20) {
            player.health -= 25;
            player.immune = true;
            setTimeout(() => {
              player.immune = false;
            }, 500);

            if (player.health <= 0) {
              gameOver = true;
              document.getElementById("gameOver").style.display = "block";
            }
          }
        });

        enemies = enemies.filter((enemy) => enemy.health > 0);
      }

      function drawEnemies() {
        enemies.forEach((enemy) => {
          ctx.fillStyle = "red";
          ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
        });
      }

      function shootBullet() {
        if (!canShoot) return;
        canShoot = false;

        const angle = Math.atan2(
          cursor.y - (player.y + player.height / 2),
          cursor.x - (player.x + player.width / 2)
        );
        bullets.push({
          x: player.x + player.width / 2,
          y: player.y + player.height / 2,
          width: 10,
          height: 10,
          speed: 7,
          dx: Math.cos(angle) * 7,
          dy: Math.sin(angle) * 7,
          piercing: false,
        });

        setTimeout(() => {
          canShoot = true;
        }, 500);
      }

      function secondaryAttack() {
        if (secondaryCooldown) return;
        secondaryCooldown = true;
        cooldownTimer = 10;

        const angle = Math.atan2(
          cursor.y - (player.y + player.height / 2),
          cursor.x - (player.x + player.width / 2)
        );
        bullets.push({
          x: player.x + player.width / 2,
          y: player.y + player.height / 2,
          width: 20,
          height: 20,
          speed: 15,
          dx: Math.cos(angle) * 15,
          dy: Math.sin(angle) * 15,
          piercing: true,
        });

        const timerElement = document.getElementById("cooldownTimer");
        const interval = setInterval(() => {
          cooldownTimer--;
          if (cooldownTimer > 0) {
            timerElement.textContent = `Cooldown: ${cooldownTimer}s`;
          } else {
            clearInterval(interval);
            secondaryCooldown = false;
            timerElement.textContent = "Secondary Attack Ready";
          }
        }, 1000);
      }

      function updateBullets() {
        bullets.forEach((bullet, index) => {
          bullet.x += bullet.dx;
          bullet.y += bullet.dy;

          if (
            bullet.x < 0 ||
            bullet.x > canvas.width ||
            bullet.y < 0 ||
            bullet.y > canvas.height
          ) {
            bullets.splice(index, 1);
          }

          enemies.forEach((enemy, eIndex) => {
            if (
              bullet.x < enemy.x + enemy.width &&
              bullet.x + bullet.width > enemy.x &&
              bullet.y < enemy.y + enemy.height &&
              bullet.y + bullet.height > enemy.y
            ) {
              enemy.health -= bullet.piercing ? 2 : 1;

              if (!bullet.piercing) bullets.splice(index, 1);

              if (enemy.health <= 0) {
                enemies.splice(eIndex, 1);
                player.health = Math.min(player.health + 10, player.maxHealth);
              } else {
                player.health = Math.min(player.health + 5, player.maxHealth);
              }
            }
          });
        });
      }

      function drawBullets() {
        bullets.forEach((bullet) => {
          ctx.fillStyle = bullet.piercing ? "green" : "darkblue";
          ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
        });
      }

      function checkWaveCompletion() {
        if (enemies.length === 0) {
          wave++;
          enemiesToSpawn += 2;
          document.getElementById("waveCounter").textContent = `Wave: ${wave}`;
          spawnEnemies();
        }
      }

      function gameLoop() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        if (gameOver) return;

        handlePlayerMovement();
        updateEnemies();
        updateBullets();
        checkWaveCompletion();
        drawPlayer();
        drawHealthBar();
        drawEnemies();
        drawBullets();

        requestAnimationFrame(gameLoop);
      }

      window.addEventListener("keydown", (e) => {
        if (e.key === "w") keys.w = true;
        if (e.key === "a") keys.a = true;
        if (e.key === "s") keys.s = true;
        if (e.key === "d") keys.d = true;
        if (e.key === " ") secondaryAttack();
      });

      window.addEventListener("keyup", (e) => {
        if (e.key === "w") keys.w = false;
        if (e.key === "a") keys.a = false;
        if (e.key === "s") keys.s = false;
        if (e.key === "d") keys.d = false;
      });

      canvas.addEventListener("mousedown", shootBullet);

      canvas.addEventListener("mousemove", (e) => {
        const rect = canvas.getBoundingClientRect();
        cursor.x = e.clientX - rect.left;
        cursor.y = e.clientY - rect.top;
      });

      spawnEnemies();
      gameLoop();
    </script>
  </body>
</html>
